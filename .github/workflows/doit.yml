name: do it

on:
  push:
    branches: [ "main" ]
  schedule:
    - cron: 33 18 * * *
  workflow_dispatch:

env:
  KAGGLE_KERNELS_PRIVATE: ${{ vars.KAGGLE_KERNELS_PRIVATE || 'no' }} # by default, do not include private kaggle kernels
  KAGGLE_KERNELS_MASK: ${{ vars.KAGGLE_KERNELS_MASK || 'yes' }} # by default, mask all kaggle kernels names in the log output
  PYTHON_VERSION: ${{ vars.PYTHON_VERSION || '3.11' }}

permissions:
  contents: read

concurrency:
  group: ${{ github.head_ref || github.run_id }}-${{ github.actor || github.repository_owner }}
  cancel-in-progress: ${{ (github.event_name == 'push' && github.base_ref == 'main' || github.event_name == 'schedule') && github.actor == github.repository_owner }}

jobs:
  doit:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: "${{ env.PYTHON_VERSION }}"

      - name: Cache pip dependencies
        if: ${{ !startsWith('graal', env.PYTHON_VERSION) && github.actor == github.repository_owner }}
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest

          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          flake8 . --count --exit-zero --select=E,F --show-source --statistics
          # Exit on syntax errors and undefined names
          exit 0  # Treats all errors as warnings (consider a stricter exit code)


      - name: Lint another time with flake8
        run: |
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run tests
        if: false
        run: |
          pytest

      - name: Login to Kaggle
        if: ${{ github.actor == github.repository_owner }}
        uses: osbm/kaggle-login@v2.3
        with:
          KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME || vars.KAGGLE_USERNAME || github.repository_owner }}
          KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}

      - name: Run app
        if: ${{ github.actor == github.repository_owner }}
        run: |
          python main.py --help || :
          echo "- kaggle kernels download process" >> $GITHUB_STEP_SUMMARY
          python main.py
          echo "- kaggle kernels downloaded" > $GITHUB_STEP_SUMMARY

      - name: ReZip kernels
        if: ${{ github.actor == github.repository_owner }}
        env:
          GNUPGHOME: /tmp/gpgtmp.7
        run: |
          DISABLE_KAGGLE_ARCHIVING="${{ env.DISABLE_KAGGLE_ARCHIVING || vars.DISABLE_KAGGLE_ARCHIVING || secrets.DISABLE_KAGGLE_ARCHIVING }}"
          if [[ "${DISABLE_KAGGLE_ARCHIVING:-}" =~ ^(true|1|y|yes|ok)$ ]]; then
            echo "Kaggle kernels archiving is disabled"
            echo "archive_created=false" >> $GITHUB_ENV
            echo "- kernels.7z has not been created as requested" > $GITHUB_STEP_SUMMARY
            exit 0
          fi
          
          if [ -z "${{ secrets.ARCHIVE_PASSWORD }}" ]; then
            echo "ARCHIVE_PASSWORD secret is not set"
            echo "- ARCHIVE_PASSWORD secret is not set" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          mkdir -p tmp
          7z x kernels.zip -otmp
          
          
          echo "- kernels.7z random password generation" > $GITHUB_STEP_SUMMARY
          strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 32 | tr -d '\n' > archive_pass.txt
          echo ::add-mask::$(cat archive_pass.txt)
          
          pushd tmp
          7z a -t7z -m0=lzma2 -mx=9 -mhe=on -ms=on -p"$(cat ../archive_pass.txt)" ../kernels.7z *
          popd
          echo "archive_created=true" >> $GITHUB_ENV
          echo "- kernels.7z has been created" > $GITHUB_STEP_SUMMARY
          
          recipient="${{ github.actor }}@users.noreply.github.com"
          echo "- creating gpg keys for `$recipient`" > $GITHUB_STEP_SUMMARY
          mkdir -p ${{ env.GNUPGHOME }}
          mkdir -p gpg
          pushd gpg
          
          gpg --batch --passphrase="${{ secrets.ARCHIVE_PASSWORD }}" --default-new-key-algo "ed25519/cert,sign+cv25519/encr" --quick-generate-key "$recipient"
          gpg --batch --pinentry-mode=loopback --yes --output private.key --passphrase="${{ secrets.ARCHIVE_PASSWORD }}" --export-secret-keys
          gpg --export --yes --output public.key
          gpg --out archive_pass.txt.gpg --encrypt --recipient "$recipient" ../archive_pass.txt
          gpg --out ../kernels.7z.gpg --encrypt --recipient "$recipient" ../kernels.7z
          popd
          
          rm -rf archive_pass.txt
          
          zip kernels_gpg gpg/* kernels.7z.gpg
          
          rm -rf tmp || :
          rm -rf gpg || :
          rm -rf ${{ env.GNUPGHOME }} || :

      - name: Upload Archive Artifact
        uses: actions/upload-artifact@v4
        if: ${{ env.archive_created == 'true' }}
        with:
          name: kernels
          path: kernels_gpg.zip
          if-no-files-found: error
          retention-days: ${{ vars.ARTIFACT_RETENTION_DAYS || 90 }}

      - name: Prepare remote git push
        if: ${{ github.actor == github.repository_owner }}
        run: |
          if [ -z "${{ secrets.DEPLOY_TO_REPOSITORY_SSH_DEPLOY_KEY || secrets.SSH_DEPLOY_KEY }}" ]; then
            echo "- DEPLOY_TO_REPOSITORY_SSH_DEPLOY_KEY secret is not set" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          
          if [ -z "${{ env.DESTINATION_REPOSITORY_NAME }}" ]; then
            if [ -z "${{ secrets.DESTINATION_REPOSITORY_NAME }}" ]; then
              echo "DESTINATION_REPOSITORY_NAME secret is not set"
              if [ -z "${{ vars.DESTINATION_REPOSITORY_USERNAME }}" ]; then
                echo "DESTINATION_REPOSITORY_USERNAME vars is not set"
              else
                export DESTINATION_REPOSITORY_NAME="${{ vars.DESTINATION_REPOSITORY_USERNAME }}"
                echo "DESTINATION_REPOSITORY_NAME set from vars"
              fi
            else
              export DESTINATION_REPOSITORY_NAME="${{ secrets.DESTINATION_REPOSITORY_NAME }}"
              echo "DESTINATION_REPOSITORY_NAME set from secrets"
            fi
          fi
          
          if [ -z "$DESTINATION_REPOSITORY_NAME" ]; then
            echo "DESTINATION_REPOSITORY_NAME is not set"
            echo "- DESTINATION_REPOSITORY_NAME is not set" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          
          if [ -z "${{ env.DESTINATION_REPOSITORY_USERNAME }}" ]; then
            if [ -z "${{ secrets.DESTINATION_REPOSITORY_USERNAME }}" ]; then
              if [ -z "${{ vars.DESTINATION_REPOSITORY_USERNAME }}" ]; then
                export DESTINATION_REPOSITORY_USERNAME="${{ github.actor }}"
                echo "DESTINATION_REPOSITORY_USERNAME set from github.actor"
              else
                export DESTINATION_REPOSITORY_USERNAME="${{ vars.DESTINATION_REPOSITORY_USERNAME }}"
                echo "DESTINATION_REPOSITORY_USERNAME set from vars"
              fi
            else
              export DESTINATION_REPOSITORY_USERNAME="${{ secrets.DESTINATION_REPOSITORY_USERNAME }}"
              echo "DESTINATION_REPOSITORY_USERNAME set from secrets"
            fi
          fi
          
          if [ -z "${{ env.GIT_DESTINATION_REPOSITORY_USERNAME }}" ]; then
            if [ -z "${{ secrets.GIT_DESTINATION_REPOSITORY_USERNAME }}" ]; then
              if [ -z "${{ vars.GIT_DESTINATION_REPOSITORY_USERNAME }}" ]; then
                export GIT_DESTINATION_REPOSITORY_USERNAME="${{ github.actor }}"
                echo "GIT_DESTINATION_REPOSITORY_USERNAME set from github.actor"
              else
                export GIT_DESTINATION_REPOSITORY_USERNAME="${{ vars.GIT_DESTINATION_REPOSITORY_USERNAME }}"
                echo "GIT_DESTINATION_REPOSITORY_USERNAME set from vars"
              fi
            else
              export GIT_DESTINATION_REPOSITORY_USERNAME="${{ secrets.GIT_DESTINATION_REPOSITORY_USERNAME }}"
              echo "GIT_DESTINATION_REPOSITORY_USERNAME set from secrets"
            fi
          fi
          
          echo "DESTINATION_REPOSITORY_NAME=$DESTINATION_REPOSITORY_NAME" >> $GITHUB_ENV
          echo "DESTINATION_REPOSITORY_USERNAME=$DESTINATION_REPOSITORY_USERNAME" >> $GITHUB_ENV
          echo "GIT_DESTINATION_REPOSITORY_USERNAME=$GIT_DESTINATION_REPOSITORY_USERNAME" >> $GITHUB_ENV
          
          rm -rf tmp || :
          mkdir -p tmp
          echo "- Extract archive" >> $GITHUB_STEP_SUMMARY
          
          7z x kernels.zip -otmp
          
          echo "DEPLOY_TO_REPOSITORY=true" >> $GITHUB_ENV
          echo "- DEPLOY_TO_REPOSITORY prepared" >> $GITHUB_STEP_SUMMARY

      - name: Determine if the repo is private
        if: ${{ env.DEPLOY_TO_REPOSITORY == 'true' }}
        run: |
          mkdir tmpgit
          EXIT_CODE=0
          git clone -q --sparse --depth 1 'https://github.com/${{ env.DESTINATION_REPOSITORY_USERNAME }}/${{ env.DESTINATION_REPOSITORY_NAME }}.git' &> tmp_git.out 2>&1 || {
            tmp_exit_code=$?
            if [[ $tmp_exit_code -ne 0 ]]; then
              if (grep --ignore-case -q "could not read Username" tmp_git.out); then
                echo "Repository is private (1)"
                EXIT_CODE=tmp_exit_code
              else
                if (grep --ignore-case -q "Authentication failed" tmp_git.out); then
                  echo "Repository is private (2)"
                  EXIT_CODE=tmp_exit_code
                fi
              fi
            fi
          }
          rm -rf tmp_git.out
          
          if [[ $EXIT_CODE -eq 128 ]]; then
            echo "Repository is private"
            echo "SAFE_TO_PUSH=true" >> $GITHUB_ENV
          else
            if [[ "${KAGGLE_KERNELS_PRIVATE:-}" =~ ^(true|1|y|yes|ok)$ ]]; then
              echo "Unable to push private kernels into a public repository"
              echo "SAFE_TO_PUSH=false" >> $GITHUB_ENV
            else
              echo "SAFE_TO_PUSH=true" >> $GITHUB_ENV
            fi
          fi
          rm -rf tmpgit
        env:
          GIT_CONFIG_SYSTEM: ''
          GIT_CONFIG_GLOBAL: ''
          GIT_CONFIG_LOCAL: ''
          GIT_TERMINAL_PROMPT: 0

      - name: Push kernels directory to another repository
        uses: cpina/github-action-push-to-another-repository@v1.7.2
        if: ${{ env.DEPLOY_TO_REPOSITORY == 'true' && env.SAFE_TO_PUSH == 'true' }}
        with:
          source-directory: tmp
          destination-github-username: ${{ env.DESTINATION_REPOSITORY_USERNAME }}
          destination-repository-name: ${{ env.DESTINATION_REPOSITORY_NAME }}
          user-name: ${{ env.GIT_DESTINATION_REPOSITORY_USERNAME }}
          user-email: ${{ env.GIT_DESTINATION_REPOSITORY_USERNAME }}@users.noreply.github.com
          create-target-branch-if-needed: ${{ vars.DEPLOY_TO_REPOSITORY_CREATE_TARGET_BRANCH_IF_NEEDED || true }}
          target-branch: ${{ env.DEPLOY_TO_REPOSITORY_TARGET_BRANCH || vars.DEPLOY_TO_REPOSITORY_TARGET_BRANCH || 'main' }}
        env:
          SSH_DEPLOY_KEY: ${{ secrets.DEPLOY_TO_REPOSITORY_SSH_DEPLOY_KEY || secrets.SSH_DEPLOY_KEY }}

      - name: Cleanup
        if: ${{ always() }}
        run: |
          rm -rf ~/.kaggle || :
          rm -rf kernels.zip || :
          rm -rf kernels.7z || :
          rm -rf tmp || :
          rm -rf tmpgit || :
          rm -rf gpg || :
          rm -rf /tmp/gpg.7 || :
          exit 0

